---
substitutions:
  heater_name: Central Heating
  boiler_name: Boiler
  ot_in_pin: GPIO18
  ot_out_pin: GPIO26
  temp_sensor_pin: GPIO21

esphome:
  name: ot-thermostat
  friendly_name: ot-thermostat
  project:
    name: MateEke.opentherm-thermostat
    version: "1.0.0"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO
  logs:
    component: ERROR
    sensor: WARN
    opentherm.output: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encription_key

ota:
  - platform: esphome
    password: !secret ota_password

dashboard_import:
  package_import_url: github://MateEke/opentherm-thermostat/opentherm-thermostat.yaml@main
  import_full_config: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ot-Thermostat Fallback Hotspot"
    password: !secret hotspot_password

captive_portal:

# Declare the phisical pins that OpenTherm adapter is connected to
opentherm:
  in_pin: ${ot_in_pin}
  out_pin: ${ot_out_pin}

# Outputs are controlled by some other components, not manually
output:
  - platform: opentherm
    t_set:
      id: boiler_ch_setpoint
      min_value: 30
      max_value: 45
      zero_means_zero: true

# Values that can be set maually from HA interface
number:
  - platform: opentherm
    t_dhw_set:
      id: boiler_dhw_setpoint
      name: "Hot Water target temperature"
      min_value: 20
      max_value: 60
      restore_value: true
      initial_value: 45

# Switches that can be operated manually from HA interface
switch:
  - platform: opentherm
    ch_enable:
      id: boiler_ch_enable
      name: "${heater_name} enabled"
      restore_mode: RESTORE_DEFAULT_ON
    dhw_enable:
      id: boiler_dhw_enable
      name: "Hot Water enabled"
      restore_mode: RESTORE_DEFAULT_ON

# Boiler numeric sensors
sensor:
  - platform: opentherm
    device_id:
      id: boiler_device_id
      name: "${boiler_name} Device Id"
    rel_mod_level:
      id: boiler_rel_mod_level
      name: "${boiler_name} Relative modulation level"
    t_boiler:
      id: boiler_temperature_ch
      name: "${boiler_name} Feed Temperature"
    t_ret:
      id: boiler_return_temperature_ch
      name: "${boiler_name} Return water temperature"

  - platform: dht
    pin: ${temp_sensor_pin}
    model: DHT22
    temperature:
      id: boiler_living_room_temp
      name: "${boiler_name} Living Room Temperature"
      accuracy_decimals: 2
      filters:
        - offset: -0.5
        - sliding_window_moving_average:
            window_size: 5 # Average over this number of last measurements
            send_every: 2 # When sensor update interval is 30s, new value will be pushed every minute
        # PID controller updates its parameters only on sensor signal, so we push the last value every second
        # We don't want to actually read the sensor temperature every second, since it would hurt performance.
        - heartbeat: 1s
    humidity:
      id: boiler_living_room_hum
      name: "${boiler_name} Living Room Humidity"
      accuracy_decimals: 1
    update_interval: 30s
  - platform: pid
    name: "${heater_name} PID Result"
    id: boiler_boiler_pid_result
    type: RESULT
  - platform: pid
    name: "${heater_name} PID Error"
    id: boiler_boiler_pid_error
    type: ERROR
  - platform: pid
    name: "${heater_name} PID Proportional"
    id: boiler_boiler_pid_proportional
    type: PROPORTIONAL
  - platform: pid
    name: "${heater_name} PID Integral"
    id: boiler_boiler_pid_integral
    type: INTEGRAL
  - platform: pid
    name: "${heater_name} PID Derivative"
    id: boiler_boiler_pid_derivative
    type: DERIVATIVE
  - platform: pid
    name: "${heater_name} PID Heat"
    id: boiler_boiler_pid_heat
    type: HEAT

# Boiler binary (True/False) sensors
binary_sensor:
  - platform: opentherm
    ch_active:
      id: boiler_ch_active
      name: "${boiler_name} Central Heating active"
    dhw_active:
      id: boiler_dhw_active
      name: "${boiler_name} Hot Water active"
    flame_on:
      id: boiler_boiler_flame_on
      name: "${boiler_name} Flame on"
    fault_indication:
      id: boiler_boiler_fault
      name: "${boiler_name} Fault"
      entity_category: diagnostic
    diagnostic_indication:
      id: boiler_boiler_diagnostic
      name: "${boiler_name} Diagnostic"
      entity_category: diagnostic

#Climate setup
climate:
  - platform: pid
    id: boiler_boiler_pid
    name: ${heater_name}
    heat_output: boiler_ch_setpoint
    default_target_temperature: 22
    sensor: boiler_living_room_temp
    humidity_sensor: boiler_living_room_hum
    visual:
      min_temperature: 15
      max_temperature: 30
      temperature_step:
        target_temperature: 0.5
        current_temperature: 0.1
    control_parameters:
      kp: 0.75
      ki: 0.005
      kd: 0 # Derivative term reacts too much to small changes in temperature, effectively turning off the boiler while target temperature is still far
      min_integral: -0.2 # Prevent integral wind-up
      max_integral: 0.2
      output_averaging_samples: 5
    deadband_parameters:
      threshold_high: 0.1
      threshold_low: -0.1
      kp_multiplier: 0
      ki_multiplier: 0.15 # integral accumulates at only 15% of normal ki
      kd_multiplier: 0
      deadband_output_averaging_samples: 15 # average the output over 15 samples within the deadband
    on_control:
      - climate.pid.reset_integral_term: boiler_boiler_pid # reset integral on target temperature change to prevent delay
